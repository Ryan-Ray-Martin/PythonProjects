Ryan Martin
Dr. Mullen
CS5001
11/21/2018


Design:

1) The data structures to be used in this assignment include lists that will be formatted in list comprehensions, and then combined to make a list of lists. This will create the spaces that will represent the placements of the player pieces during the game. The functionality of lists will work best in this class, considering the parameters of Othello. 

2) The classes used in this game can be done in five: piece, move, game_controller, player, and board. 

3) The piece class will contain the data structure, and the method included here will display the starting pieces of the game, using a formula for scalability. The move class will differentiate between the player turns and traits, containing a display method. Later on, it might contain more game logic, such as legal and illegal moves. The game controller method will indicate the beginning and ending of the game. It will contain begin game and end game methods to provide a space of gameplay logic, such as counter and available moves. The player class will contain more game logic when the assignment requires the
AI to be implemented. As of now, it is an empty class. Finally, the board contains a method that displaysthe lines of the Othello gameboard. 

4) Psuedocode:

method displaying the gameboard:
for the number of columns
for the number of rows
draw the columns and rows

or 

for the size of the grid
draw rows
draw columns

method for displaying pieces in the middle:
display black game pieces in the index x,y location of the list of list representing gameboard
display white  game pieces in the index x,y location of the list of list representing gameboard

Psuedocode of Driver:
-from board import Board
-from piece import Piece
-from game_controller import GameController

-WIDTH = 600
-HEIGHT = 600
-BOXES = 8
-board = Board(WIDTH)
-piece = Piece(WIDTH)
-gc = GameController(WIDTH)


A setup method
-size(WIDTH, HEIGHT)
-colorMode(RGB, 1)
-background(0, 0.7, 0)
-oard.display(WIDTH)
-piece.start_piece(WIDTH) piece is the object

A method which uses mousePressed()
   - for row in the total rows in gameboard
   - for the value of the rows in gaomeboard
   - if value of the click is on gameboard
   - call start game functions to place pieces on gameboard




